A Sediment database is comprised of three layers of hierarchy: Basins, Strata, 
and Grains.

The file header contains information about a list of Basins. In turn, each Basin 
contains information about a list of Strata.

A Stratum contains a collection of Grains. The Stratum configures how large each
grain is and how many grains are stored.

This design allows multiple Strata to have different Grain sizes, enabling better 
data packing of values of varying sizes.

The below example is a file that has a single batch committed to it for a single 
grain: Grain 0 of Stratum 0 of Basin 0.

┌──────────────────────────────────────────────────────────────────────────────┐
│ 0x0000 - File Header:                                                        │
└──────────────────────────────────────────────────────────────────────────────┘

The responsibility of the file header is to be the "root" that points to all 
active data.

The file header has two copies. The "batch" of each header is compared upon 
loading, and the largest value is attempted to be read. If all data modified 
during the last commit can be validated, the most recent header is used. 
Otherwise, the previous header is validated. Upon validation, the new header and 
all modified data will be zeroed before allowing the database to proceed in 
opening.

┌────────┬─────────────────────────┬─────────────────────────┬────────┬────────┐
│00000000│ d2 76 e1 fa 01 00 00 00 ┊ 01 00 00 00 00 00 00 00 │×v××•000┊•0000000│
|        | A---------| B| .. .. .. ┊ C---------------------| │        ┊        │
│00000010│ 00 00 00 00 00 00 00 00 ┊ 00 90 00 00 00 00 00 00 │00000000┊0×000000│
|        | D---------------------| ┊ E---------------------| │        ┊        │
│00000020│ 01 00 00 00 00 00 00 00 ┊ 00 20 00 00 00 00 00 00 │•0000000┊0 000000│
|        | F---------------------| ┊ G---------------------| │        ┊        │
│00000030│ 00 00 00 00 00 00 00 00 ┊ 00 00 00 00 00 00 00 00 │00000000┊00000000│
│*       │                         ┊                         │        ┊        │
│00001000│ fe f1 11 68 00 00 00 00 ┊ 00 00 00 00 00 00 00 00 │××•h0000┊00000000│
|        | H---------| I| .. .. .. ┊ J---------------------| │        ┊        │
│00001010│ 00 00 00 00 00 00 00 00 ┊ 00 00 00 00 00 00 00 00 │00000000┊00000000│
|        | K---------------------| ┊ L---------------------| │        ┊        │
│*       │                         ┊                         │        ┊        │
└────────┴─────────────────────────┴─────────────────────────┴────────┴────────┘
Copy A:
A: CRC32
B: Basin Count (1)
C: Batch (1)
D: Checkpoint (0)
E: Commit Log Offset (0x9000)
F: Basin 0: Batch (1)
G: Basin 0: Offset (0x2000)

Copy B:
H: CRC32
I: Basin Count (0)
J: Batch (0)
K: Checkpoint (0)
L: Commit Log Offset (None)


┌──────────────────────────────────────────────────────────────────────────────┐
│ 0x20000 - Basin 0:                                                           │
└──────────────────────────────────────────────────────────────────────────────┘

The role of each Basin is to store a list of Strata, enabling a degree of 
hierarchy.

The role of each Stratum is to allocate a number of same-sized Grains, organized
into a series of Grain Maps. The `Grain Length Power` is evaluated as `2^x` bytes.
The `Grain Pages per Grain Map Power` is evaluated as `2^x` pages. Grain Maps are 
written in pages of 170 Grains each, making the smallest Stratum able to hold 170 
Grains.

Each Basin has two copies stored. While the file header is written each time a 
new commit is written, Basins only need to change when a new Stratum is allocated 
or a Stratum is modified. The copy with the latest batch is used, and if a 
rollback occurs, any Basins changed during that batch will be zeroed on disk.

┌────────┬─────────────────────────┬─────────────────────────┬────────┬────────┐
│00002000│ ac 17 29 02 01 00 00 00 ┊ 01 00 00 00 00 00 00 00 │×•)••000┊•0000000│
|        | A---------| B| .. .. .. ┊ C---------------------| │        ┊        │
│00002010│ 00 00 00 00 00 00 00 00 ┊ 00 00 00 00 00 00 00 00 │00000000┊00000000│
│00002020│ 01 00 00 00 00 04 00 00 ┊ 00 40 00 00 00 00 00 00 │•0000•00┊0@000000│
|        | D---------| E| F| .. .. ┊ G---------------------| │        ┊        │
│00002030│ 00 00 00 00 00 00 00 00 ┊ 00 00 00 00 00 00 00 00 │00000000┊00000000│
│*       │                         ┊                         │        ┊        │
│00003000│ 00 00 00 00 00 00 00 00 ┊ 00 00 00 00 00 00 00 00 │00000000┊00000000│
|        | H---------| I| .. .. .. ┊ J---------------------| │        ┊        │
│*       │                         ┊                         │        ┊        │
└────────┴─────────────────────────┴─────────────────────────┴────────┴────────┘

Copy A:
A: CRC32
B: Stratum Count (1)
C: Batch (1)
D: Grain Map Count (1)
E: Stratum 0: Grain Pages per Grain Map Power (0)
F: Stratum 0: Grain Length Power (4)
G: Stratum 0: Grain Map Location (0x4000)

Copy B:
H: CRC32
I: Stratum Count (0)
J: Batch (0)


┌──────────────────────────────────────────────────────────────────────────────┐
│ 0x4000 - Basin 0 Stratum 0 Grain Map 0 Header:                               │
└──────────────────────────────────────────────────────────────────────────────┘

The Grain Map header is written any time a grain is freed or allocated, but not 
archived. This header is written in duplicate allowing rollback logic similar to 
the Basin rollback logic.

┌────────┬─────────────────────────┬─────────────────────────┬────────┬────────┐
│00004000│ 81 a9 36 e8 01 00 00 00 ┊ 00 00 00 00 01 00 00 00 │××6×•000┊0000•000│
|        | A---------| B-----------|-----------| C---------->│        ┊        │
│00004010│ 00 00 00 00 00 00 00 00 ┊ 00 00 00 00 00 00 00 00 │00000000┊00000000│
│*       │ |-----------------------|-----------------------| │        ┊        │
└────────┴─────────────────────────┴─────────────────────────┴────────┴────────┘

Copy A:
A: CRC32
B: Batch (0)
C: Grain Allocation States (all 0s)

Copy B: Never written (all 0's)


┌──────────────────────────────────────────────────────────────────────────────┐
│ 0x6000 - Basin 0 Stratum 0 Grain Map 0 Page 0:                               │
└──────────────────────────────────────────────────────────────────────────────┘

The Grain Map Page is written any time a grain is changed on the page. This 
structure makes the assumption that when overwriting a page with the same data 
and a crash/power outage occurs, the disk state will be one of the following:

- The old data
- The new data
- A mix of bytes from either old data or new data

If it is possible for the disk state to contain invalid data, this structure 
cannot be recovered in this scenario.

To roll back, any grains that were changed during the batch being rolled back 
must have their data reverted. The high bit of the BatchId signals whether or 
not the batch in the file is "active". For each grain, its state is determined 
by this logic:

- Is "Archived At" set and the high bit 0? The data is currently archived and 
  should be treated as removed from the database. It is still present for a full
  commit log
- Is "Allocated At" set and the high bit 0? The data is allocated and valid.
- Otherwise: The data is considered freed.

The state can be verified based on the operation details in the commit log, and
the same information can be used to help revert the grain to the previous state.

┌────────┬─────────────────────────┬─────────────────────────┬────────┬────────┐
│00006000│ 01 00 00 00 00 00 00 00 ┊ 00 00 00 00 00 00 00 00 │•0000000┊00000000│
|        | A---------------------| | B---------------------| │        ┊        │
│00006010│ 0b 00 00 00 87 ec 08 bb ┊ 00 00 00 00 00 00 00 00 │•000××•×┊00000000│
|        | C---------| D---------| |                         │        ┊        │
│00006020│ 00 00 00 00 00 00 00 00 ┊ 00 00 00 00 00 00 00 00 │00000000┊00000000│
│*       │                         ┊                         │        ┊        │
│00006ff0│ f0 0b 4f 15 00 00 00 00 ┊ 00 00 00 00 00 00 00 00 │×•O•0000┊00000000│
|        | E---------|             |                         │        ┊        │
└────────┴─────────────────────────┴─────────────────────────┴────────┴────────┘

A: Grain 0: "Allocated At" Batch (1)
B: Grain 0: "Archived At" Batch (0)
C: Grain 0: Data Length (11)
D: Grain 0: Data CRC32
E: Page CRC32

┌──────────────────────────────────────────────────────────────────────────────┐
│ 0x7000 - Basin 0 Stratum 0 Grain Map 0 Grain Data:                           │
└──────────────────────────────────────────────────────────────────────────────┘

These two pages of the file are subdivided into sections based on the Stratum 
configuration. In this case, the grains are 16 bytes long each. The actual length
of the stored data is stored within the grain map page, allowing reading the 
correct number of bytes from a highly cached data structure.

┌────────┬─────────────────────────┬─────────────────────────┬────────┬────────┐
│00007000│ 68 65 6c 6c 6f 20 77 6f ┊ 72 6c 64 00 00 00 00 00 │hello wo┊rld00000│
|        | A-----------------------|-------------------------|        ┊        │
│00007010│ 00 00 00 00 00 00 00 00 ┊ 00 00 00 00 00 00 00 00 │00000000┊00000000│
│*       │                         ┊                         │        ┊        │
└────────┴─────────────────────────┴─────────────────────────┴────────┴────────┘

A: Grain 0 Data (hello world)


┌──────────────────────────────────────────────────────────────────────────────┐
│ 0x8000 - Commit Log Entry 0:                                                 │
└──────────────────────────────────────────────────────────────────────────────┘

The commit log is a list of all grains changed during the commit. Grain 
operations are simple: allocate (0), archive (1), or free (2). This log encodes 
each entry as 12 bytes by encoding the starting GrainId, the operation, and the
number of sequential grains affected.

┌────────┬─────────────────────────┬─────────────────────────┬────────┬────────┐
│00008000│ 00 00 00 00 00 00 00 00 ┊ 01 00 00 00 00 00 00 00 │00000000┊•0000000│
|        | A---------------------| | B---------|             │        ┊        │
│00008010│ 00 00 00 00 00 00 00 00 ┊ 00 00 00 00 00 00 00 00 │00000000┊00000000│
│*       │                         ┊                         │        ┊        │
└────────┴─────────────────────────┴─────────────────────────┴────────┴────────┘

A: Change 0: Starting GrainId
B: Change 0: Operation (0b00 -- high 2 bits) and Count (1, remaining 30 bits)


┌──────────────────────────────────────────────────────────────────────────────┐
│ 0x9000 - Commit Log Page 0:                                                  │
└──────────────────────────────────────────────────────────────────────────────┘

The commit log is written in a linked-list type structure of pages. The first 8 
bytes of the page is the offset of the previous page, if one is present. After 
that short prelude, each set of 24 bytes following comprises a new entry. Entries 
that have a Batch of 0 are considered empty.

When rolling a commit back, the log page should have the 24-byte range for the 
entry zeroed.

┌────────┬─────────────────────────┬─────────────────────────┬────────┬────────┐
│00009000│ 00 00 00 00 00 00 00 00 ┊ 01 00 00 00 00 00 00 00 │00000000┊•0000000│
|        | A---------------------| | B---------------------| │        ┊        │
│00009010│ 00 80 00 00 00 00 00 00 ┊ 96 ce f1 d5 0c 00 00 00 │0×000000┊××××_000│
|        | C---------------------| | D---------| E---------| │        ┊        │
│00009020│ 00 00 00 00 00 00 00 00 ┊ 00 00 00 00 00 00 00 00 │00000000┊00000000│
|        | F---------------------| |                         │        ┊        │
│*       │                         ┊                         │        ┊        │
└────────┴─────────────────────────┴─────────────────────────┴────────┴────────┘

A: Previous Log Page Offset (None)
B: First Batch Id (1)
C: Entry 0: Entry Offset (0x8000)
D: Entry 0: Entry CRC
E: Entry 0: Entry Length (12)
F: Entry 0: Embedded Header GrainId (None)